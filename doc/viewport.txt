*ViewPort*  View buffer of selected part of a target buffer


                           View Port
            ----------------------------------------

PURPOSE ~

Some times I want to make diffs of parts of files using the vimdiff.  You
simply cannot mark parts of file to be in vimdiff.  Here this plugin comes
handy.  It makes a view port on a range of lines: it copies range of lines to
a new buffer, sets two marks in the source buffer, which mark the starting and
ending positions.  When you save the view port with the vim |:write| command,
the modified data is installed back into the source file.  If the source file
was changed (in the range where view port is opened) and you try to save it an
error message is printed, you can use :write! to overwrite.  You can modify
the source as you wish, just don't delete the starting line and ending line of
the view port, since you will remove the marks.  You can also move the marks
to new position and update the view port.

! IMPORTANT !
THIS PLUGIN DISABLES `t` and `y` AS MARKS BY DEFAULT
YOU CAN USE OTHER LETTERS WITH |g:viewport_start_mark| and |g:viewport_end_mark|

USAGE                                    *viewport*

In visual mode select a region and then `<leader>nr` to will execute over it
|ViewPortSplit| command (see below)
    To define custom mappings for |ViewPortSplit| use `<Plug>VPsplit`

    To create custom mapping use:
        `vnoremap [mapping] :<line1>,<line2>call ViewPort("[cmd]")`

                                    *:ViewPort*
:[range]ViewPort [cmd]
    Make view port on the [range] (the default is the current line).  The new
    buffer is opened with [cmd] command.

                                    *:ViewPortSplit*
:[range]ViewPortSplit
    Open view port in a new split window.
        If `g:viewport_split_vertical=1` then window will open vertically


In the view port buffer:

                                    *viewport-:write*
:w[rite][!]
    Install the changes in to the source buffer.  If the original buffer in
    the range the view port was modified an error message is printed, unless
    the bang is used.  If one of the view port marks was deleted, an error
    message is printed and the writting process is abandoned.  The plugin also
    takes care about the 'modified' option.  If the view port is written
    without errors 'modififed' is reset.

                                    *:Update*
:Update
    Loads what is in the source file into the view port buffer.

VARIABLES

g:viewport_split_vertical
    If set to 1, `ViewPortSplit` will split window vertically (default: 0)

g:viewport_start_mark
    Set letter to use as region starting position (default 't')

g:viewport_start_mark
    Set letter to use as region ending position (default 'y')

LICENSE ~
Vim license, :help license

vim: ft=help
